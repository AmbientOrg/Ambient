
[components."core::primitives"]
name = "Primitives"
description = "Components that create primitive (in the geometric sense) objects from their attached entities."

[components."core::primitives::cube"]
type = "Empty"
name = "Cube"
description = """
If attached to an entity, the entity will be converted to a cube primitive.
The cube is unit-sized (i.e. 0.5 metres out to each side)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::quad"]
type = "Empty"
name = "Quad"
description = """
If attached to an entity, the entity will be converted to a quad primitive.
The quad is unit-sized on the XY axes, and flat on the Z axis (i.e. 0.5 metres out to the XY axes)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere"]
type = "Empty"
name = "Sphere"
description = """
If attached to an entity alongside the other `sphere_*` components, the entity will be converted to a sphere primitive.
To easily instantiate a unit-diameter `sphere`, consider using the `sphere` concept (e.g. `make_sphere`)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_radius"]
type = "F32"
name = "Sphere radius"
description = "Set the radius of a `sphere` entity."
default = 0.5
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_sectors"]
type = "U32"
name = "Sphere sectors"
description = "Set the longitudinal sectors of a `sphere` entity."
default = 36
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_stacks"]
type = "U32"
name = "Sphere stacks"
description = "Set the latitudinal stacks of a `sphere` entity."
default = 18
attributes = ["Debuggable", "Networked", "Store"]

# Concepts

[concepts.sphere]
name = "Sphere"
description = "A primitive sphere."

[concepts.sphere.components]
"core::primitives::sphere" = {}
"core::primitives::sphere_radius" = 0.5
"core::primitives::sphere_sectors" = 36
"core::primitives::sphere_stacks" = 18
