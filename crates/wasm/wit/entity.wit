default interface entity {
    use pkg.types.{entity-id, vec3, quat, mat4}
    use pkg.component.{entity as entity-data}

    /// An action in an animation.
    record animation-action {
        // we assume only URLs for now
        /// The animation clip URL to play.
        clip-url: string,
        // no time: we assume this is being played at the time of playback
        // will be relaxed later
        /// Whether or not this action should loop
        looping: bool,
    }

    /// Controls the animations for an entity.
    record animation-controller {
        /// All of the actions that contribute to this animation.
        /// Will be blended together.
        actions: list<animation-action>,
        /// Whether or not the first action's pose should be used as a base pose.
        apply-base-pose: bool,
    }

    /// Variant of animation action stack that samples to specific action index
    record animation-sample-percentage {
        /// Index into animation controller actions
        action-index: u32,
        /// Time [0, 1]
        time-percentage: float32,
    }


    /// Variant of animation action stack that samples to specific action index
    record animation-sample-absolute {
        /// Index into animation controller actions
        action-index: u32,
        /// Time in seconds
        time-absolute: float32,
    }

    /// Variant of animation action stack to blend two samples using a mask
    record animation-stack-blend {
        /// Blend weight [0, 1]
        weight: float32,
        /// Index into animation binder mask weights
        mask: u32,
    }


    /// Variant of animation action stack that marks a transition from one stack to another,
    /// Anything before this operation will be removed once the transition is completed.
    record animation-stack-transition {
        /// Blend weight [0, 1]
        weight: float32,
        /// Duration in seconds
        duration: float32,
    }


    /// Variant of animation action stack that resets the start to current time and samples the animation.
    // After it has started this action transform into a Sample operation.
    record animation-stack-start {
        /// Index into animation controller actions
        action-index: u32,
        /// Duration in seconds
        speed: float32,
    }

    /// Animation blend stack
    variant animation-action-stack {
        /// Resets the start of the action to now and transform this operation to Sample
        start(animation-stack-start),
        /// Sample action at current time
        sample(u32),
        /// Sample action at time percentage
        sample-percentage(animation-sample-percentage),
        /// Sample action at an absolute time point
        sample-absolute(animation-sample-absolute),
        /// Interpolate the two samples on top of the stack
        interpolate(float32),
        /// Blend the two samples on top of the stack with the binder mask weights index
        blend(animation-stack-blend),
        /// Transition to a new set of operations following this operation
        transition(animation-stack-transition),
    }


    set-animation-action-stack: func(entity: entity-id, stack: list<animation-action-stack>, transition-duration: float32)
    set-animation-binder-mask: func(entity: entity-id, mask: list<string>)
    get-animation-binder-mask: func(entity: entity-id) -> list<string>
    set-animation-binder-weights: func(entity: entity-id, index: u32, mask: list<float32>)
    get-animation-binder-mask-entities: func(entity: entity-id) -> list<entity-id>
    play-animation-action-index: func(entity: entity-id, index: u32, speed: float32, transition-duration: float32)

    get-transforms-relative-to: func(entities: list<entity-id>, origin: entity-id) -> list<mat4>

    spawn: func(data: entity-data) -> entity-id
    despawn: func(entity: entity-id) -> option<entity-data>
    set-animation-controller: func(entity: entity-id, animation-controller: animation-controller)
    in-area: func(position: vec3, radius: float32) -> list<entity-id>

    exists: func(entity: entity-id) -> bool
    get-all: func(index: u32) -> list<entity-id>
    resources: func() -> entity-id
    synchronized-resources: func() -> entity-id
    persisted-resources: func() -> entity-id
}