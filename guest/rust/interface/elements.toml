# The following file is auto-generated. Please do not change this file.
[project]
id = "runtime_components"
name = "Runtime Components"
version = "0.0.1"

[components]
"core::app::main_scene" = { name = "Main scene", description = "This entity belongs to the main scene", type = "Empty" }
"core::app::name" = { name = "Name", description = "A human-friendly name for this entity", type = "String" }
"core::app::ui_scene" = { name = "UI scene", description = "This entity belongs to the UI scene", type = "Empty" }
"core::camera::active_camera" = { name = "Active camera", description = "The camera being used for rendering; higher value means higher priority", type = "F32" }
"core::camera::aspect_ratio" = { name = "Aspect ratio", description = "The aspect ratio of this camera", type = "F32" }
"core::camera::aspect_ratio_from_window" = { name = "Aspect ratio from window", description = "When set, the aspect_ratio component will be the aspect ratio of the window", type = "Empty" }
"core::camera::far" = { name = "Far plane", description = "The far plane of this camera", type = "F32" }
"core::camera::fog" = { name = "Fog", description = "Whether or not this camera sees fog", type = "Empty" }
"core::camera::fovy" = { name = "Field of View Y", description = "The field of view of this camera in the Y/vertical direction, measured in radians", type = "F32" }
"core::camera::near" = { name = "Near plane", description = "The near plane of this camera", type = "F32" }
"core::camera::perspective" = { name = "Perspective projection", description = "This camera will use a standard perspective projection matrix; `near` and `far` must be set", type = "Empty" }
"core::camera::perspective_infinite_reverse" = { name = "Perspective-infinite-reverse projection", description = "This camera will use a perspective-infinite-reverse projection matrix; this is well-suited for rendering large worlds as it has no far plane", type = "Empty" }
"core::camera::projection" = { name = "Projection", description = "The projection matrix of this camera; can be driven by other components", type = "Mat4" }
"core::camera::projection_view" = { name = "Projection-view", description = "The composition of the projection and view (inverse-local-to-world) matrices", type = "Mat4" }
"core::camera::shadows_far" = { name = "Shadows far plane", description = "The far plane for the shadow camera", type = "F32" }
"core::camera::ui_camera" = { name = "UI Camera", description = "This camera is used to render UI", type = "Empty" }
"core::ecs::children" = { name = "Children", description = "The children of this entity", type = { type = "Vec", element_type = "EntityId" } }
"core::ecs::dont_store" = { name = "Don't store", description = "Indicates that this entity shouldn't be stored on disk", type = "Empty" }
"core::ecs::id" = { name = "ID", description = "The ID of the entity", type = "EntityId" }
"core::ecs::ids" = { name = "IDs", description = "A generic list of entity IDs, with no semantic meaning", type = { type = "Vec", element_type = "EntityId" } }
"core::ecs::parent" = { name = "Parent", description = "The parent of this entity", type = "EntityId" }
"core::ecs::uid" = { name = "UID", description = "A unique ID that can be used to preserve the identity of an entity, even when it is recreated", type = "EntityUid" }
"core::model::model_animatable" = { name = "Model animatable", description = "Controls whether this model can be animated", type = "Bool" }
"core::model::model_loaded" = { name = "Model loaded", description = "Indicates that this enitty has a model spawned on it", type = "Empty" }
"core::network::is_remote_entity" = { name = "Is remote entity", description = "This entity was not spawned locally (e.g. if this is the client, it was spawned by the server)", type = "Empty" }
"core::network::persistent_resources" = { name = "Persistent resources", description = "Global resources that are persisted to disk and synchronized to clients", type = "Empty" }
"core::network::synced_resources" = { name = "Synced resources", description = "Global resources that are synchronized to clients, but not persisted", type = "Empty" }
"core::physics::box_collider" = { name = "Box collider", description = "Box physics collider; x, y, z is the size", type = "Vec3" }
"core::physics::character_controller_height" = { name = "Character controller height", description = "The height of the physics character controller attached to this entity", type = "F32" }
"core::physics::character_controller_radius" = { name = "Character controller radius", description = "The radius of the physics character controller attached to this entity", type = "F32" }
"core::physics::collider_from_url" = { name = "Collider from URL", description = "URL-loaded physics collider; value is the URL to load from", type = "String" }
"core::physics::collider_loads" = { name = "Collider loads", description = "All colliders that were loaded in this physics tick", type = { type = "Vec", element_type = "EntityId" } }
"core::physics::density" = { name = "Density", description = "The density of this entity; used for rescaling operations", type = "F32" }
"core::physics::dynamic" = { name = "Dynamic", description = "Dynamic = true, static = false", type = "Bool" }
"core::physics::make_physics_static" = { name = "Make physics static", description = "When placed on the world's resources, all physics objects will be made static when loaded", type = "Bool" }
"core::physics::mass" = { name = "Mass", description = "The mass of this entity, measured in kilograms", type = "F32" }
"core::physics::physics_controlled" = { name = "Physics controlled", description = "Indicates that this entity should be controlled by the physics system", type = "Empty" }
"core::physics::plane_collider" = { name = "Plane collider", description = "Plane physics collider; x, y, z is the normal, w is the distance", type = "Empty" }
"core::physics::sphere_collider" = { name = "Sphere collider", description = "Sphere physics collider; value is radius", type = "F32" }
"core::physics::unit_mass" = { name = "Unit mass", description = "The mass of a character/unit", type = "F32" }
"core::physics::unit_velocity" = { name = "Unit velocity", description = "The velocity of a character/unit", type = "Vec3" }
"core::physics::unit_yaw" = { name = "Unit yaw", description = "The yaw of a character/unit", type = "F32" }
"core::player::local_user_id" = { name = "Local user ID", description = "The user ID of the local player", type = "String" }
"core::player::player" = { name = "Player", description = "This entity is a player (note that this is a logical construct; a player's body may be separate from the player itself)", type = "Empty" }
"core::player::user_id" = { name = "User ID", description = "The user ID. Can be attached to more than just the player; will also be attached to their sub-entities, like their head and such", type = "String" }
"core::primitives::cube" = { name = "Cube", description = "Makes the entity it's attached to a cube", type = "Empty" }
"core::primitives::quad" = { name = "Quad", description = "Makes the entity it's attached to a quad", type = "Empty" }
"core::rendering::cast_shadows" = { name = "Cast shadows", description = "This entity casts shadows", type = "Empty" }
"core::rendering::color" = { name = "Color", description = "Tints the entity this color if non-zero", type = "Vec4" }
"core::rendering::double_sided" = { name = "Double-sided", description = "Render with double-sided rendering", type = "Bool" }
"core::rendering::fog_color" = { name = "Fog color", description = "The color of the global fog", type = "Vec3" }
"core::rendering::fog_density" = { name = "Fog density", description = "The density of the global fog", type = "F32" }
"core::rendering::fog_height_falloff" = { name = "Fog height fall-off", description = "The height at which the global fog will fall off (i.e. stop being visible)", type = "F32" }
"core::rendering::joint_matrices" = { name = "Joint Matrices", description = "The matrices corresponding to the joints of a skinned mesh", type = { type = "Vec", element_type = "Mat4" } }
"core::rendering::joints" = { name = "Joints", description = "The joints that compose this skinned mesh", type = { type = "Vec", element_type = "EntityId" } }
"core::rendering::light_ambient" = { name = "Light ambient", description = "The ambient light color of the active sun", type = "Vec3" }
"core::rendering::light_diffuse" = { name = "Light diffuse", description = "The diffuse light color of the active sun", type = "Vec3" }
"core::rendering::outline" = { name = "Outline", description = "Render this entity with an outline", type = "Vec4" }
"core::rendering::outline_recursive" = { name = "Outline (recursive)", description = "Render this entity with an outline, and make sure all child entities have the same outline", type = "Vec4" }
"core::rendering::overlay" = { name = "Overlay", description = "Render this entity with an overlay", type = "Empty" }
"core::rendering::sun" = { name = "Sun", description = "Marks this entity as a sun (i.e. its rotation will be used to control the global light direction); higher numbers are higher priority", type = "F32" }
"core::rendering::transparency_group" = { name = "Transparency group", description = "Transparent objects are sorted by (transparency_group, z-depth)", type = "I32" }
"core::transform::cylindrical_billboard_z" = { name = "Cylindrical billboard Z", description = "Ensures this entity is always aligned with the camera, except on the Z-axis; useful for trees and such", type = "Empty" }
"core::transform::euler_rotation" = { name = "Euler rotation", description = "The Euler rotation of this entity in ZYX order.", type = "Vec3" }
"core::transform::inv_local_to_world" = { name = "Inverse Local to World", description = "Converts a world position to a local position; driven by `local_to_world`", type = "Mat4" }
"core::transform::local_to_parent" = { name = "Local to Parent", description = "Transformation from the entity's local space to the parent's space", type = "Mat4" }
"core::transform::local_to_world" = { name = "Local to World", description = "Transformation from the entity's local space to worldspace", type = "Mat4" }
"core::transform::lookat_center" = { name = "Look-at center", description = "The position that this entity should be looking at", type = "Vec3" }
"core::transform::lookat_up" = { name = "Look-at up", description = "When combined with `lookat_center`, the up vector for this entity", type = "Vec3" }
"core::transform::mesh_to_local" = { name = "Mesh to Local", description = "Transformation from mesh-space to the entity's local space.", type = "Mat4" }
"core::transform::mesh_to_world" = { name = "Mesh to World", description = "Transformation from mesh-space to world space; driven by `mesh_to_local` and `local_to_world`", type = "Mat4" }
"core::transform::reset_scale" = { name = "Reset scale", description = "When this component is applied to a transform hierarchy, the scale will be reset at that point (and only rotation/translation considered)", type = "Empty" }
"core::transform::rotation" = { name = "Rotation", description = "The rotation of this entity", type = "Quat" }
"core::transform::scale" = { name = "Scale", description = "The scale of this entity", type = "Vec3" }
"core::transform::spherical_billboard" = { name = "Spherical billboard", description = "Ensures that this entity is always aligned with the camera", type = "Empty" }
"core::transform::translation" = { name = "Translation", description = "The translation/position of this entity", type = "Vec3" }
