[package]
id = "tangent_schema"
name = "Tangent Schema"
version = "0.1.0"
content = { type = "Asset", schema = true }

[components]
# Player
"player::vehicle_ref" = { type = "EntityId", name = "Player's Vehicle", description = "The player's vehicle. Attached to each player.", attributes = [
    "Networked",
    "Debuggable",
] }
"player::input_direction" = { type = "Vec2", name = "Input Direction", description = "Input direction" }
"player::input_jump" = { type = "Bool", name = "Jump", description = "Jump" }

# Vehicle data
"vehicle_data::general::max_health" = { type = "F32", name = "Max Health", description = "Maximum health of the vehicle", attributes = [
    "Networked",
] }

"vehicle_data::thruster::offsets" = { type = { type = "Vec", element_type = "Vec2" }, name = "Thruster Offsets", description = "Offsets of the thrusters from the center of the vehicle", attributes = [
    "Networked",
] }
"vehicle_data::thruster::k_p" = { type = "F32", name = "Thruster K_p", description = "Proportional gain for the thrusters" }
"vehicle_data::thruster::k_d" = { type = "F32", name = "Thruster K_d", description = "Derivative gain for the thrusters" }
"vehicle_data::thruster::target" = { type = "F32", name = "Thruster Target Altitude", description = "Target altitude for the thrusters" }
"vehicle_data::thruster::max_strength" = { type = "F32", name = "Thruster Max Strength", description = "Maximum strength of the thrusters" }

"vehicle_data::input::forward_force" = { type = "F32", name = "Forward Force", description = "Forward force applied to the vehicle on input" }
"vehicle_data::input::backward_force" = { type = "F32", name = "Backward Force", description = "Backward force applied to the vehicle on input" }
"vehicle_data::input::forward_offset" = { type = "Vec2", name = "Forward Offset", description = "Offset of the forward force from the center of the vehicle. Typically at the back of the vehicle." }

"vehicle_data::input::side_force" = { type = "F32", name = "Side Force", description = "Side force applied to the vehicle on input" }
"vehicle_data::input::side_offset" = { type = "Vec2", name = "Side Offset", description = "Offset of the side force from the center of the vehicle. Typically at the front of the vehicle." }

"vehicle_data::input::jump_force" = { type = "F32", name = "Jump Force", description = "Jump force applied to the vehicle on input" }

"vehicle_data::input::pitch_strength" = { type = "F32", name = "Pitch Strength", description = "Strength of the pitch applied to the applicable thrusters of the vehicle on input" }
"vehicle_data::input::turning_strength" = { type = "F32", name = "Turning Strength", description = "Strength of the turning applied to the applicable thrusters of the vehicle on input" }

"vehicle_data::input::jump_timeout" = { type = "Duration", name = "Jump Timeout", description = "Timeout between jumps" }

"vehicle_data::slowdown::linear_strength" = { type = "F32", name = "Linear Strength", description = "Strength of the linear slowdown applied to the vehicle" }
"vehicle_data::slowdown::angular_strength" = { type = "F32", name = "Angular Strength", description = "Strength of the angular slowdown applied to the vehicle" }
"vehicle_data::slowdown::angular_delay" = { type = "Duration", name = "Angular Delay", description = "Time to wait before applying angular slowdown" }

# Vehicle
"vehicle::player_ref" = { type = "EntityId", name = "Vehicle", description = "A vehicle (and its driver)", attributes = [
    "Networked",
] }

"vehicle::health" = { type = "F32", name = "Health", description = "Health of the vehicle", attributes = [
    "Networked",
] }

"vehicle::last_distances" = { type = { type = "Vec", element_type = "F32" }, name = "Last Distances", description = "Distances from the ground for each vehicle probe", attributes = [
    "Networked",
] }
"vehicle::last_jump_time" = { type = "Duration", name = "Last Jump Time", description = "The last time the player jumped", attributes = [
    "Networked",
] }
"vehicle::last_slowdown_time" = { type = "Duration", name = "Last Slowdown Time", description = "The last time the player's vehicle was slowed down", attributes = [
    "Networked",
] }
"vehicle::last_upside_down_time" = { type = "Duration", name = "Last Upside Down Time", description = "The last time the player's vehicle was known to be upside down. Added when first detected, removed when no longer the case. Used to respawn the vehicle after some time.", attributes = [
    "Networked",
] }

# Vehicle (client-only)
"vehicle::client::speed_kph" = { type = "F32", name = "Speed (KPH)", description = "Speed of the vehicle in kilometers per hour." }

# Spawnpoint
"spawnpoint::is_spawnpoint" = { type = "Empty", name = "Is Spawnpoint", description = "Is a spawnpoint", attributes = [
    "Networked",
] }
"spawnpoint::radius" = { type = "F32", name = "Radius", description = "Radius of the spawnpoint", attributes = [
    "Networked",
] }

# Explosion
"explosion::is_explosion" = { type = "Empty", name = "Is Explosion", description = "Is an explosion", attributes = [
    "Networked",
] }
"explosion::radius" = { type = "F32", name = "Radius", description = "Radius of the explosion", attributes = [
    "Networked",
] }
"explosion::created_at" = { type = "Duration", name = "Created At", description = "Time the explosion was created. Must be manually attached using a spawn_query as time is not synchronized between client and server at time of writing." }

[concepts.VehicleData]
name = "Vehicle Data"
description = "Data for a vehicle"
[concepts.VehicleData.components.required]
"ambient_core::physics::density" = {}

"vehicle_data::general::max_health" = {}

"vehicle_data::thruster::offsets" = {}
"vehicle_data::thruster::k_p" = {}
"vehicle_data::thruster::k_d" = {}
"vehicle_data::thruster::target" = {}
"vehicle_data::thruster::max_strength" = {}

"vehicle_data::input::forward_force" = {}
"vehicle_data::input::backward_force" = {}
"vehicle_data::input::forward_offset" = {}

"vehicle_data::input::side_force" = {}
"vehicle_data::input::side_offset" = {}

"vehicle_data::input::jump_force" = {}

"vehicle_data::input::pitch_strength" = {}
"vehicle_data::input::turning_strength" = {}

"vehicle_data::input::jump_timeout" = {}

"vehicle_data::slowdown::linear_strength" = {}
"vehicle_data::slowdown::angular_strength" = {}
"vehicle_data::slowdown::angular_delay" = {}

[concepts.Vehicle]
name = "Vehicle"
description = "A vehicle with a physical representation"
extends = ["VehicleData"]
[concepts.Vehicle.components.required]
"ambient_core::physics::linear_velocity" = {}
"ambient_core::physics::angular_velocity" = {}
"ambient_core::physics::physics_controlled" = {}
"ambient_core::physics::dynamic" = {}

"ambient_core::transform::translation" = {}
"ambient_core::transform::rotation" = {}

"vehicle::player_ref" = {}
"vehicle::health" = {}
"vehicle::last_distances" = {}
"vehicle::last_jump_time" = {}
"vehicle::last_slowdown_time" = {}
[concepts.Vehicle.components.optional]
"vehicle::last_upside_down_time" = {}

[concepts.Spawnpoint]
name = "Spawnpoint"
description = "A spawnpoint"
[concepts.Spawnpoint.components.required]
"spawnpoint::is_spawnpoint" = {}
"spawnpoint::radius" = {}
"ambient_core::transform::translation" = {}

[concepts.Explosion]
name = "Explosion"
description = "An explosion"
[concepts.Explosion.components.required]
"explosion::is_explosion" = {}
"explosion::radius" = {}
"ambient_core::transform::translation" = {}
[concepts.Explosion.components.optional]
"explosion::created_at" = {}

[messages.OnCollision]
name = "On Collision"
description = "Sent to the client when a vehicle collides with something."
fields = { position = "Vec3", speed = "F32", vehicle_id = "EntityId" }

[messages.OnDeath]
name = "On Death"
description = "Sent to server modules when a vehicle is destroyed."
fields = { position = "Vec3", player_id = "EntityId" }
